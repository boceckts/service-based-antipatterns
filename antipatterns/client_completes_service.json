{
  "antiPatterns": [
    {
      "name": "Client Completes Service",
      "aliases": [
        "Incomplete Service"
      ],
      "description": "A service has a well defined abstraction and interface. However, the functionality of the service requires additional implementation for non-functional requirements by the client such as input validation and security checking.",
      "context": "",
      "detection": "In web-based applications, client artifacts such as JSP or servlets include code for e.g. data validation or security checking.",
      "consequences": "Implementing security-related functionality in a client instead of in the server may lead to the insertion of bad data or unauthorized access to the service. Functionality also has to be implemented multiple times for each client. Unit tests for such functionality (e.g. data validation) may fail or contain a lot of overhead code to properly test such a service.",
      "cause": "Mainly caused by a lack of understanding that services shall be self-contained, standalone functional components. This comes from a web-centric development approach where developers think that client artifacts are the only ones that use the service. A lack of communication in the development team can also lead to this antipattern.",
      "solution": "Refactor the infrastructure-related functionality from the client to the server. The client can still include some code for e.g. data validation or security checking to enhance its performance or usability.",
      "example": "A servlet or JSP includes code to validate user input in order to correctly use an underlying service.",
      "sources": [
        "@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}"
      ],
      "tags": [
        "soa",
        "architecture",
        "abstraction"
      ],
      "relatedItems": [
      ]
    }
  ]
}
