{
  "antiPatterns": [
    {
      "name": "CRUDy Interface",
      "aliases": [
        "Maybe It is Not RPC"
      ],
      "description": "An RPC-like behaviour is used to design create, read, update and delete (CRUD) operations as service interfaces which can result in chatty API interactions and poor system performance.",
      "context": "",
      "detection": "",
      "consequences": "If several CRUD operations are necessary for the completion of one abstraction, this can lead to chatty API interaction, because multiple methods need to be invoked to achieve one goal. This can be especially harmful when synchronous requests are chained together.",
      "cause": "",
      "solution": "CRUD operations should not be exposed via interfaces. Instead, a more coarse-grained operation should be created to fulfill an abstraction.",
      "example": "create_X(), read_Y()",
      "sources": [
        "@article{ouni2017search, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603--617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July}}",
        "@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"
      ],
      "tags": [
        "soa",
        "application",
        "data_management",
        "rpc"
      ],
      "relatedItems": [
        {
          "relation": "relates",
          "name": "Chatty Service"
        },
        {
          "relation": "precedes",
          "name": "Data Service"
        }
      ]
    }
  ]
}
