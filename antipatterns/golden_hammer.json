{
  "antiPatterns": [
    {
      "name": "Golden Hammer",
      "aliases": [
        "When in doubt, make it a service"
      ],
      "description": "A system implements its functionality as services although there are no objective reasons for and benefits from this. Algorithmic functions can also be a type of this antipattern if they are frequently used and rely on large data exchanges.",
      "context": "",
      "detection": "",
      "consequences": "Unnecessary distribution can lead to performance issues, because direct communication is more efficient. There are also higher efforts for development, testing, and debugging, because implementing functionality as services is complex.",
      "cause": "Services may be chosen because of their promised scalability, modifiability, or interoperability, even though these quality attributes are not really vital for the system at hand. A general reason therefore is a poor understanding of the system's requirements. Lastly, using new and hyped technology or architectural styles is attractive and tempting for a lot of developers and architects.",
      "solution": "Refactor service to appropriate Java/J2EE component.",
      "example": " Functionality is implemented as a web service, although it is only used internally by the system. The assumption is that this would be better for future requirements, but it reduces the performance.",
      "sources": [
        "@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}"
      ],
      "tags": [
        "microservices",
        "soa",
        "architecture"
      ],
        "relatedItems": [
          {
            "relation": "related",
            "name": "Silver Bullet"
          },
          {
            "relation": "related",
            "name": "Nothing New"
          }
      ]
    }
  ]
}
