{
  "antiPatterns": [
    {
      "name": "SOAPY Business Logic",
      "aliases": [
        "Muddy Tiers"
      ],
      "description": "A service endpoint implements business logic, but also deals with SOAP/XML processing.",
      "context": "",
      "detection": "Web service data types or processing tasks exist that also implement business logic. This can be the case, if the underlying business logic has methods that get typical web service implementation arguments, e.g. 'javax.activation.DataHandler'. Additionally, the business logic component may also process XML parsing.",
      "consequences": "The business logic is not reusable, because it contains web service specific implementation.",
      "cause": "One cause could be the inexperience in architecting n-tier solutions. Alternatively, the goal may be to implement a specific web service and it is not taken into account which other clients potentially want to access the same business logic.",
      "solution": "A refactoring according to the business delegate pattern is needed. Therefore, one possibility would be to use stateless session beans or Java classes to implement the web service. Then these components should dispatch requests to the underlying business logic.",
      "example": "A stateless session bean is used as implementation component for a web service. The bean directly receives the requests to the web services container and is therefore coupled to the JAX-RPC binding types.",
      "sources": [
        "@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}"
      ],
      "tags": [
        "soa",
        "architecture"
      ],
      "relatedItems": [
        {
          "relation": "relates",
          "name": "Connector Envy"
        }
      ]
    }
  ]
}
