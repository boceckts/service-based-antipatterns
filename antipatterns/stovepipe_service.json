{
  "antiPatterns": [
    {
      "name": "Stovepipe Service",
      "aliases": [
        "Multilayer Service"
      ],
      "description": "Common low level functionality such as logging or currency conversion is duplicated over several services.",
      "context": "",
      "detection": "Stovepipe services typically have a large number of private implementation methods.",
      "consequences": "Technical and utility functions are implemented inconsistently. Development time of stovepipe services is considerably larger. Duplicated code and different implementations for the same functionality also has a negative impact on maintainability.",
      "cause": "Inexperience in developing multilayer architectures is one reason that can result in stovepipe services. They can also be caused by insufficient team communication and a lack of design or code reviews.",
      "solution": "Refactor the common private methods of all services into new technical services or utility classes. Alternatively, these functionality can be refactored to a new super class from which all services can inherit.",
      "example": "A service implements private methods for technical tasks such as 'auditEvent' or 'notify' which might also be implemented by other services.",
      "sources": [
        "@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}",
        "@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"
      ],
      "tags": [
        "soa",
        "architecture",
        "multilayer",
        "system"
      ],
      "relatedItems": [
        {
          "relation": "relates",
          "name": "Scattered Parasitic Functionality"
        }
      ]
    }
  ]
}
